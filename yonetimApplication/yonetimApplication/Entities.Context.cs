//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace yonetimApplication
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjeGorevTakipSistemiEntities : DbContext
    {
        public ProjeGorevTakipSistemiEntities()
            : base("name=ProjeGorevTakipSistemiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_Manager> tbl_Manager { get; set; }
        public virtual DbSet<tbl_Personel> tbl_Personel { get; set; }
        public virtual DbSet<tbl_Project> tbl_Project { get; set; }
        public virtual DbSet<tbl_ProjectManager> tbl_ProjectManager { get; set; }
        public virtual DbSet<tbl_TaskforPersonel> tbl_TaskforPersonel { get; set; }
        public virtual DbSet<tbl_TaskforProjectManager> tbl_TaskforProjectManager { get; set; }
        public virtual DbSet<tbl_Login> tbl_Login { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_delete_Manager(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_Manager", idParameter);
        }
    
        public virtual int sp_delete_Personel(Nullable<int> personel_id)
        {
            var personel_idParameter = personel_id.HasValue ?
                new ObjectParameter("personel_id", personel_id) :
                new ObjectParameter("personel_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_Personel", personel_idParameter);
        }
    
        public virtual int sp_delete_ProjectManager(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_ProjectManager", idParameter);
        }
    
        public virtual int sp_delete_TaskforPersonel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_TaskforPersonel");
        }
    
        public virtual int sp_delete_TaskforProjectManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_TaskforProjectManager");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_excludePersonelFromProject(Nullable<int> personelId, Nullable<int> projectId)
        {
            var personelIdParameter = personelId.HasValue ?
                new ObjectParameter("personelId", personelId) :
                new ObjectParameter("personelId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_excludePersonelFromProject", personelIdParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<sp_getAvailablePersonelByProjectId_Result> sp_getAvailablePersonelByProjectId(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAvailablePersonelByProjectId_Result>("sp_getAvailablePersonelByProjectId", projectIdParameter);
        }
    
        public virtual ObjectResult<sp_getPersonelByProjectId_Result> sp_getPersonelByProjectId(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPersonelByProjectId_Result>("sp_getPersonelByProjectId", projectIdParameter);
        }
    
        public virtual ObjectResult<sp_getProjectsByPersonelId_Result> sp_getProjectsByPersonelId(Nullable<int> personelId)
        {
            var personelIdParameter = personelId.HasValue ?
                new ObjectParameter("personelId", personelId) :
                new ObjectParameter("personelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectsByPersonelId_Result>("sp_getProjectsByPersonelId", personelIdParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_includePersoneltoProject(Nullable<int> personId, Nullable<int> projcetId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var projcetIdParameter = projcetId.HasValue ?
                new ObjectParameter("projcetId", projcetId) :
                new ObjectParameter("projcetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_includePersoneltoProject", personIdParameter, projcetIdParameter);
        }
    
        public virtual int sp_insert_Manager(string managerName, string managerSurname, string managerTeam, string managerMail, Nullable<System.DateTime> managerStartDate, string managerLocation)
        {
            var managerNameParameter = managerName != null ?
                new ObjectParameter("managerName", managerName) :
                new ObjectParameter("managerName", typeof(string));
    
            var managerSurnameParameter = managerSurname != null ?
                new ObjectParameter("managerSurname", managerSurname) :
                new ObjectParameter("managerSurname", typeof(string));
    
            var managerTeamParameter = managerTeam != null ?
                new ObjectParameter("managerTeam", managerTeam) :
                new ObjectParameter("managerTeam", typeof(string));
    
            var managerMailParameter = managerMail != null ?
                new ObjectParameter("managerMail", managerMail) :
                new ObjectParameter("managerMail", typeof(string));
    
            var managerStartDateParameter = managerStartDate.HasValue ?
                new ObjectParameter("managerStartDate", managerStartDate) :
                new ObjectParameter("managerStartDate", typeof(System.DateTime));
    
            var managerLocationParameter = managerLocation != null ?
                new ObjectParameter("managerLocation", managerLocation) :
                new ObjectParameter("managerLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Manager", managerNameParameter, managerSurnameParameter, managerTeamParameter, managerMailParameter, managerStartDateParameter, managerLocationParameter);
        }
    
        public virtual int sp_insert_Personel(string personelName, string personelSurname, string personelTeam, string personelMail, Nullable<System.DateTime> personelStartDate, string personelLocation)
        {
            var personelNameParameter = personelName != null ?
                new ObjectParameter("personelName", personelName) :
                new ObjectParameter("personelName", typeof(string));
    
            var personelSurnameParameter = personelSurname != null ?
                new ObjectParameter("personelSurname", personelSurname) :
                new ObjectParameter("personelSurname", typeof(string));
    
            var personelTeamParameter = personelTeam != null ?
                new ObjectParameter("personelTeam", personelTeam) :
                new ObjectParameter("personelTeam", typeof(string));
    
            var personelMailParameter = personelMail != null ?
                new ObjectParameter("personelMail", personelMail) :
                new ObjectParameter("personelMail", typeof(string));
    
            var personelStartDateParameter = personelStartDate.HasValue ?
                new ObjectParameter("personelStartDate", personelStartDate) :
                new ObjectParameter("personelStartDate", typeof(System.DateTime));
    
            var personelLocationParameter = personelLocation != null ?
                new ObjectParameter("personelLocation", personelLocation) :
                new ObjectParameter("personelLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Personel", personelNameParameter, personelSurnameParameter, personelTeamParameter, personelMailParameter, personelStartDateParameter, personelLocationParameter);
        }
    
        public virtual int sp_insert_Project(Nullable<int> projectProjectManagerId, string projectName, string projectDescription, string projectStatus, Nullable<System.DateTime> projectStartDate, Nullable<System.DateTime> projectDeadLine, Nullable<System.DateTime> projectLastUpdated)
        {
            var projectProjectManagerIdParameter = projectProjectManagerId.HasValue ?
                new ObjectParameter("projectProjectManagerId", projectProjectManagerId) :
                new ObjectParameter("projectProjectManagerId", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("projectDescription", projectDescription) :
                new ObjectParameter("projectDescription", typeof(string));
    
            var projectStatusParameter = projectStatus != null ?
                new ObjectParameter("projectStatus", projectStatus) :
                new ObjectParameter("projectStatus", typeof(string));
    
            var projectStartDateParameter = projectStartDate.HasValue ?
                new ObjectParameter("projectStartDate", projectStartDate) :
                new ObjectParameter("projectStartDate", typeof(System.DateTime));
    
            var projectDeadLineParameter = projectDeadLine.HasValue ?
                new ObjectParameter("projectDeadLine", projectDeadLine) :
                new ObjectParameter("projectDeadLine", typeof(System.DateTime));
    
            var projectLastUpdatedParameter = projectLastUpdated.HasValue ?
                new ObjectParameter("projectLastUpdated", projectLastUpdated) :
                new ObjectParameter("projectLastUpdated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Project", projectProjectManagerIdParameter, projectNameParameter, projectDescriptionParameter, projectStatusParameter, projectStartDateParameter, projectDeadLineParameter, projectLastUpdatedParameter);
        }
    
        public virtual int sp_insert_ProjectManager(string projectManagerName, string projectManagerSurname, string projectManagerTeam, string projectManagerEmail, Nullable<System.DateTime> projectManagerStartDate, string projectManagerLocation)
        {
            var projectManagerNameParameter = projectManagerName != null ?
                new ObjectParameter("projectManagerName", projectManagerName) :
                new ObjectParameter("projectManagerName", typeof(string));
    
            var projectManagerSurnameParameter = projectManagerSurname != null ?
                new ObjectParameter("projectManagerSurname", projectManagerSurname) :
                new ObjectParameter("projectManagerSurname", typeof(string));
    
            var projectManagerTeamParameter = projectManagerTeam != null ?
                new ObjectParameter("projectManagerTeam", projectManagerTeam) :
                new ObjectParameter("projectManagerTeam", typeof(string));
    
            var projectManagerEmailParameter = projectManagerEmail != null ?
                new ObjectParameter("projectManagerEmail", projectManagerEmail) :
                new ObjectParameter("projectManagerEmail", typeof(string));
    
            var projectManagerStartDateParameter = projectManagerStartDate.HasValue ?
                new ObjectParameter("projectManagerStartDate", projectManagerStartDate) :
                new ObjectParameter("projectManagerStartDate", typeof(System.DateTime));
    
            var projectManagerLocationParameter = projectManagerLocation != null ?
                new ObjectParameter("projectManagerLocation", projectManagerLocation) :
                new ObjectParameter("projectManagerLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_ProjectManager", projectManagerNameParameter, projectManagerSurnameParameter, projectManagerTeamParameter, projectManagerEmailParameter, projectManagerStartDateParameter, projectManagerLocationParameter);
        }
    
        public virtual int sp_insert_TaskforPersonel(Nullable<int> taskProjectId, Nullable<int> taskPersonId, string taskName, string taskDescription, string taskStatus, Nullable<System.DateTime> taskDeadLine, Nullable<System.DateTime> taskLastUpdated)
        {
            var taskProjectIdParameter = taskProjectId.HasValue ?
                new ObjectParameter("taskProjectId", taskProjectId) :
                new ObjectParameter("taskProjectId", typeof(int));
    
            var taskPersonIdParameter = taskPersonId.HasValue ?
                new ObjectParameter("taskPersonId", taskPersonId) :
                new ObjectParameter("taskPersonId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("taskName", taskName) :
                new ObjectParameter("taskName", typeof(string));
    
            var taskDescriptionParameter = taskDescription != null ?
                new ObjectParameter("taskDescription", taskDescription) :
                new ObjectParameter("taskDescription", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("taskStatus", taskStatus) :
                new ObjectParameter("taskStatus", typeof(string));
    
            var taskDeadLineParameter = taskDeadLine.HasValue ?
                new ObjectParameter("taskDeadLine", taskDeadLine) :
                new ObjectParameter("taskDeadLine", typeof(System.DateTime));
    
            var taskLastUpdatedParameter = taskLastUpdated.HasValue ?
                new ObjectParameter("taskLastUpdated", taskLastUpdated) :
                new ObjectParameter("taskLastUpdated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_TaskforPersonel", taskProjectIdParameter, taskPersonIdParameter, taskNameParameter, taskDescriptionParameter, taskStatusParameter, taskDeadLineParameter, taskLastUpdatedParameter);
        }
    
        public virtual int sp_insert_TaskforProjectManager(Nullable<int> taskProjectId, Nullable<int> taskPersonId, string taskName, string taskDescription, string taskStatus, Nullable<System.DateTime> taskDeadLine, Nullable<System.DateTime> taskLastUpdated)
        {
            var taskProjectIdParameter = taskProjectId.HasValue ?
                new ObjectParameter("taskProjectId", taskProjectId) :
                new ObjectParameter("taskProjectId", typeof(int));
    
            var taskPersonIdParameter = taskPersonId.HasValue ?
                new ObjectParameter("taskPersonId", taskPersonId) :
                new ObjectParameter("taskPersonId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("taskName", taskName) :
                new ObjectParameter("taskName", typeof(string));
    
            var taskDescriptionParameter = taskDescription != null ?
                new ObjectParameter("taskDescription", taskDescription) :
                new ObjectParameter("taskDescription", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("taskStatus", taskStatus) :
                new ObjectParameter("taskStatus", typeof(string));
    
            var taskDeadLineParameter = taskDeadLine.HasValue ?
                new ObjectParameter("taskDeadLine", taskDeadLine) :
                new ObjectParameter("taskDeadLine", typeof(System.DateTime));
    
            var taskLastUpdatedParameter = taskLastUpdated.HasValue ?
                new ObjectParameter("taskLastUpdated", taskLastUpdated) :
                new ObjectParameter("taskLastUpdated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_TaskforProjectManager", taskProjectIdParameter, taskPersonIdParameter, taskNameParameter, taskDescriptionParameter, taskStatusParameter, taskDeadLineParameter, taskLastUpdatedParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_report_PersonnelinProject_Result> sp_report_PersonnelinProject(Nullable<int> project_id)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("project_id", project_id) :
                new ObjectParameter("project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_report_PersonnelinProject_Result>("sp_report_PersonnelinProject", project_idParameter);
        }
    
        public virtual ObjectResult<sp_report_TaskinProject_Result> sp_report_TaskinProject(Nullable<int> project_id)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("project_id", project_id) :
                new ObjectParameter("project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_report_TaskinProject_Result>("sp_report_TaskinProject", project_idParameter);
        }
    
        public virtual ObjectResult<sp_select_Manager_Result> sp_select_Manager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Manager_Result>("sp_select_Manager");
        }
    
        public virtual ObjectResult<sp_select_Personel_Result> sp_select_Personel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Personel_Result>("sp_select_Personel");
        }
    
        public virtual ObjectResult<sp_select_Project_Result> sp_select_Project()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Project_Result>("sp_select_Project");
        }
    
        public virtual ObjectResult<sp_select_ProjectManager_Result> sp_select_ProjectManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_ProjectManager_Result>("sp_select_ProjectManager");
        }
    
        public virtual ObjectResult<sp_select_TaskforPersonel_Result> sp_select_TaskforPersonel(Nullable<int> project_id)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("project_id", project_id) :
                new ObjectParameter("project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_TaskforPersonel_Result>("sp_select_TaskforPersonel", project_idParameter);
        }
    
        public virtual ObjectResult<sp_select_TaskforProjectManager_Result> sp_select_TaskforProjectManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_TaskforProjectManager_Result>("sp_select_TaskforProjectManager");
        }
    
        public virtual int sp_tbl_Project_InsteadOfDelete(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_tbl_Project_InsteadOfDelete", projectIdParameter);
        }
    
        public virtual int sp_update_Manager(Nullable<int> id, string managerName, string managerSurname, string managerTeam, string managerMail, Nullable<System.DateTime> managerStartDate, string managerLocation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("managerName", managerName) :
                new ObjectParameter("managerName", typeof(string));
    
            var managerSurnameParameter = managerSurname != null ?
                new ObjectParameter("managerSurname", managerSurname) :
                new ObjectParameter("managerSurname", typeof(string));
    
            var managerTeamParameter = managerTeam != null ?
                new ObjectParameter("managerTeam", managerTeam) :
                new ObjectParameter("managerTeam", typeof(string));
    
            var managerMailParameter = managerMail != null ?
                new ObjectParameter("managerMail", managerMail) :
                new ObjectParameter("managerMail", typeof(string));
    
            var managerStartDateParameter = managerStartDate.HasValue ?
                new ObjectParameter("managerStartDate", managerStartDate) :
                new ObjectParameter("managerStartDate", typeof(System.DateTime));
    
            var managerLocationParameter = managerLocation != null ?
                new ObjectParameter("managerLocation", managerLocation) :
                new ObjectParameter("managerLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_Manager", idParameter, managerNameParameter, managerSurnameParameter, managerTeamParameter, managerMailParameter, managerStartDateParameter, managerLocationParameter);
        }
    
        public virtual int sp_update_PASSWORD(Nullable<int> id, string password)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_PASSWORD", idParameter, passwordParameter);
        }
    
        public virtual int sp_update_Personel(Nullable<int> id, string personelName, string personelSurname, string personelTeam, string personelMail, Nullable<System.DateTime> personelStartDate, string personelLocation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var personelNameParameter = personelName != null ?
                new ObjectParameter("personelName", personelName) :
                new ObjectParameter("personelName", typeof(string));
    
            var personelSurnameParameter = personelSurname != null ?
                new ObjectParameter("personelSurname", personelSurname) :
                new ObjectParameter("personelSurname", typeof(string));
    
            var personelTeamParameter = personelTeam != null ?
                new ObjectParameter("personelTeam", personelTeam) :
                new ObjectParameter("personelTeam", typeof(string));
    
            var personelMailParameter = personelMail != null ?
                new ObjectParameter("personelMail", personelMail) :
                new ObjectParameter("personelMail", typeof(string));
    
            var personelStartDateParameter = personelStartDate.HasValue ?
                new ObjectParameter("personelStartDate", personelStartDate) :
                new ObjectParameter("personelStartDate", typeof(System.DateTime));
    
            var personelLocationParameter = personelLocation != null ?
                new ObjectParameter("personelLocation", personelLocation) :
                new ObjectParameter("personelLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_Personel", idParameter, personelNameParameter, personelSurnameParameter, personelTeamParameter, personelMailParameter, personelStartDateParameter, personelLocationParameter);
        }
    
        public virtual int sp_update_Project(Nullable<int> id, Nullable<int> projectProjectManagerId, string projectName, string projectDescription, string projectStatus, Nullable<System.DateTime> projectStartDate, Nullable<System.DateTime> projectDeadLine, Nullable<System.DateTime> projectLastUpdated)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var projectProjectManagerIdParameter = projectProjectManagerId.HasValue ?
                new ObjectParameter("projectProjectManagerId", projectProjectManagerId) :
                new ObjectParameter("projectProjectManagerId", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("projectDescription", projectDescription) :
                new ObjectParameter("projectDescription", typeof(string));
    
            var projectStatusParameter = projectStatus != null ?
                new ObjectParameter("projectStatus", projectStatus) :
                new ObjectParameter("projectStatus", typeof(string));
    
            var projectStartDateParameter = projectStartDate.HasValue ?
                new ObjectParameter("projectStartDate", projectStartDate) :
                new ObjectParameter("projectStartDate", typeof(System.DateTime));
    
            var projectDeadLineParameter = projectDeadLine.HasValue ?
                new ObjectParameter("projectDeadLine", projectDeadLine) :
                new ObjectParameter("projectDeadLine", typeof(System.DateTime));
    
            var projectLastUpdatedParameter = projectLastUpdated.HasValue ?
                new ObjectParameter("projectLastUpdated", projectLastUpdated) :
                new ObjectParameter("projectLastUpdated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_Project", idParameter, projectProjectManagerIdParameter, projectNameParameter, projectDescriptionParameter, projectStatusParameter, projectStartDateParameter, projectDeadLineParameter, projectLastUpdatedParameter);
        }
    
        public virtual int sp_update_ProjectManager(Nullable<int> id, string projectManagerName, string projectManagerSurname, string projectManagerTeam, string projectManagerEmail, Nullable<System.DateTime> projectManagerStartDate, string projectManagerLocation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var projectManagerNameParameter = projectManagerName != null ?
                new ObjectParameter("projectManagerName", projectManagerName) :
                new ObjectParameter("projectManagerName", typeof(string));
    
            var projectManagerSurnameParameter = projectManagerSurname != null ?
                new ObjectParameter("projectManagerSurname", projectManagerSurname) :
                new ObjectParameter("projectManagerSurname", typeof(string));
    
            var projectManagerTeamParameter = projectManagerTeam != null ?
                new ObjectParameter("projectManagerTeam", projectManagerTeam) :
                new ObjectParameter("projectManagerTeam", typeof(string));
    
            var projectManagerEmailParameter = projectManagerEmail != null ?
                new ObjectParameter("projectManagerEmail", projectManagerEmail) :
                new ObjectParameter("projectManagerEmail", typeof(string));
    
            var projectManagerStartDateParameter = projectManagerStartDate.HasValue ?
                new ObjectParameter("projectManagerStartDate", projectManagerStartDate) :
                new ObjectParameter("projectManagerStartDate", typeof(System.DateTime));
    
            var projectManagerLocationParameter = projectManagerLocation != null ?
                new ObjectParameter("projectManagerLocation", projectManagerLocation) :
                new ObjectParameter("projectManagerLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_ProjectManager", idParameter, projectManagerNameParameter, projectManagerSurnameParameter, projectManagerTeamParameter, projectManagerEmailParameter, projectManagerStartDateParameter, projectManagerLocationParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
